CrossOver
Implementation Guidelines for Airline Ticket Reservation System
Author : Mário de Sá Vera
Date : June 17th 2016


	This document presents a detailed description of the implementation process of the proposed Airline Ticket Reservation System (named Air-TS) as well as installation instructions for system testing. The implementation follows the design document located at :

var/doc/DESAVERA-DESIGN-DOCUMENT-2016-05.pdf

	The installation instructions are divided in two different scenarios for a Junior Developer as a target for taking along this implementation (i.e. a development environment) and a testing environment using cloud computing for all system architecture modules.

1- Technologies integrated

	As a JAVA stack solution and attending to the work scope we will use the following technologies for the system implementation :

- Linux 

Both the development and testing environment will run on Linux Ubuntu flavour as the operating system. This is due to the facilities offered for both developer and operational profiles (i.e. devops). Linux also offers a very stable and open source compatible environment as most of the technologies used in both development and testing environment with Amazon Web Services.

- Amazon Web Services (AWS)

Amazon services for cloud computing were used for testing environment infrastructure as it offers from a no costs infrastructure up to full production services for high scaling systems for eventual future options. The following services were used from AWS :

* EC2 was chosen with the minimum resources configured in order to enable the system testing environment (i.e. Ubuntu Server 14.04 LTS (HVM), SSD Volume Type).

other services like RDS and SNS for database and messaging should be also integrated in the future.As of the time of this writing these services will be installed as part of the system images configured for deployment with Docker.io.

- Docker.io

Docker.io is a container image manager where we are able to configure a whole infrastructure with all services integrated so that a deployment of a testing or production environment can be done with no configuration difference between environments.

- MySQL

MySQL is an open source natural choice for simplicity and it addresses perfectly the scenario exposed in the trial.


- Apache Tomcat and ActiveMQ

Tomcat is a very simple, robust and easy to install Application Server in Linux systems and it addresses perfectly the scenario exposed in the trial as well as offers solid integration with both MySQL and Spring frameworks.

- Spring Frameworks

Spring is a major integrator itself of several technologies. The Spring Boot project was quite helpful by providing both a JPA container for ORM as well as deployment starters with embedded containers (ex : Apache Tomcat and ActiveMQ) directly from Maven dependency declarations.

- Maven

The build engine of our choice was Maven. Even though quite a verbosous tool it made dependency management for the set of technologies used quite simple.



2- Design patterns and principles used

As a rule of thumb for any system architecture the low coupling and high cohesion of system modules are the main goals.The first design pattern used is the Model, View and Controller (i.e. MVC) pattern. 

- MVC

As the system consists of a Web Application developed as a SAAS (i.e. Software as a Service) architecture, a proper solution for cohesive services in a client x server paradigma is necessary. We do not want to mix presentation layout user interface logic with business logic so that requirements like REQ_OPER_SERVER_FLEX_ARCH for enabling mobile apps without any modification suggests and justify the MVC pattern as well as this framework usage.

- RESTful API with an API Gateway

A RESTful microservices architecture with a API gateway is a Mediator design pattern.

- Microservices architecture

fine-grained



3- Installation instructions

Assuming you have access to a Ubuntu system with admin priviledges and the basic infrastrucuture for Database and Application Servers in place (please follow the technologies specification and database creation and configuration in sessions (1) and (4) respectively), in order to install AIRTS for a development environment you should go to the directory where you saved the uploaded solution file and do :

# unzip DESAVERA_CA_Air2.zip  
# cd airts/bin
# install.sh

check the installation complete message and the system is ready to be tested by accessing in a web browser 

4- Database creation and initialization

For a Linux system with MySQL 5.5 or newer installed the devop (playing both profiles as developer and operational admin) will create the AIRTS database instance from the mysql command line :

mysql> source DB-RESERVATION-CORE.sql

and in order to populate the initial mock data into the AIRTS development database instance :

mysql> source DB-RESERVATION-DATA.sql

you now have the database ready for running the AIRTS system.

5- Assumptions adopted

The major assumption is related to the scalability and infrastructure of the system being delivered as part of this test. In the design document I suggested using AWS EC2,RDS and so on (i.e. Amazon Web Services) infrastructure with load balanced modules to achieve high performance for each service deployed. This is a full testing scenario and for simplicity and to enable the junior developers to reproduce a development environment I am not going to deploy the services in a cloud computing environment. All services will still attend to operational requirement REQ_OPER_SERVER_CLOUD_ARCH and a cloud full testing environment deployment would require no change to the source code at all.

Finally, in terms of infrastructure I assume the system tester with admin access to a Linux Ubuntu system with MySQL installed.

6- Requirements not covered by the current implementation 

7- General issues

This is a mock system.There are several complexities of a real time Airline Tickets Reservation System would have to take care of (ex : multiple stops flights) that were ignored by the architecture and implementation also.

8- Feedback

A very challenging trial folks ! The only issu I had was that the second trial home page is not in sync with the application page and that took me about a week to be able to start the second trial.
